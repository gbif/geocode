package org.gbif.geocode.ws.layers.postgis;

import org.gbif.geocode.api.cache.AbstractBitmapCachedLayer;
import org.gbif.geocode.api.model.Location;
import org.gbif.geocode.ws.persistence.mapper.LocationMapper;

import java.io.InputStream;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A shapefile-backed layer with a bitmap cache.
 *
 * Assumes shapefiles have three columns (id, title, isoCode), as generated by database/import.sh.
 */
public abstract class AbstractPostGISLayer extends AbstractBitmapCachedLayer {
  private Logger LOG = LoggerFactory.getLogger(getClass());
  private long queries = 0;

  private final LocationMapper locationMapper;

  AbstractPostGISLayer(LocationMapper locationMapper, InputStream bitmap, int maxLocations) {
    super(bitmap, maxLocations);
    this.locationMapper = locationMapper;
  }

  @Override
  public double adjustUncertainty(double uncertaintyDegrees, double latitude) {
    return uncertaintyDegrees;
  }

  /**
   * Query the shapefile.
   */
  @Override
  protected List<Location> queryDatasource(double latitude, double longitude, double uncertainty) {
    String sqlName = name().replace("PG_", "");
    List<Location> locations = locationMapper.queryLayer(longitude, latitude, uncertainty, sqlName);

    if ((++queries % 10_000) == 0) {
      LOG.info("{} did {} PostGIS queries.", name(), queries);
    }

    return locations;
  }
}
